import math, colorful
from random import randint

patterns = {}
max_value = 63

def save_patterns():
  global patterns

  with open("led_patterns.h", "w") as pattern_file:
    pattern_file.write("// AUTO GENERATED BY generate_patterns.py - DO NOT EDIT MANUALLY\n\n")
    pattern_file.write("#define PATTERN_AMOUNT %d\n\n" % (len(patterns)) )

    i = 0
    for name in patterns:
      pattern = patterns[name]      
      pattern_file.write("// %s, length %d\n" % (name, len(pattern[0]) ))
      pattern_file.write( "const uint8_t pat%d_a[] = { %s, 255, 255 };\n" % (i, ", ".join([str(x) for x in pattern[0]])))
      pattern_file.write( "const uint8_t pat%d_b[] = { %s, 255, 255 };\n\n" % (i, ", ".join([str(x) for x in pattern[1]])))
      i = i + 1

    pat_list = ["pat%d_a, pat%d_b" % (x, x) for x in range(len(patterns)) ]
    pattern_file.write("const uint8_t *led_patterns[] = { %s };\n" % ", ".join( pat_list ))


# pattern functions should return values between 0 and 1, these will be scaled automatically
def linear(i, m):
  return i / (m / 2) if i < m / 2 else ((m - i) / (m / 2))

def sine(i, m):
  return (math.sin((i / m) * math.pi * 2) + 1.0) / 2.0

def random(i, m):
  v = randint(0, 100) / 100.0
  return v

last_twinkle = 0
def twinkle(i, m):
  global last_twinkle
  v = last_twinkle + float(randint(-100, 100)) / 500.0 # variance no more than 0.1 per tick
  v = max(min(v, 1), 0)  
  last_twinkle = v
  return v

def sparkle(i, m):
  return (math.sin((i / m) * math.pi * 4) + 1.0) / 3.0 + (randint(0, 100) / 300.0)

def disco(i, m):
  return ((math.sin((i / m) * math.pi * 16)) + (math.cos((i / m) * math.pi * 2)) / 2.0)  + 1.0

def square(i, m):
  return int(i / 16) % 2

def lighthouse1(i, m):
  return math.sin((i / m) * math.pi * 4)

def lighthouse2(i, m):
  return math.sin((i / m) * math.pi * 4 + (math.pi))

# if funcA == funcB then the second pattern will be the inverse of the first
def generate_pattern(funcA, funcB, count):
  pattern = [[], []]
  for i in range(0, count):
    vA = max(min(funcA(i, count), 1), 0)
    pattern[0].append(int(vA * 63.0))

    if funcA == funcB:
      pattern[1].append(int(max_value - pattern[0][-1]))
    else:
      vB = max(min(funcB(i, count), 1), 0)
      pattern[1].append(int(vB * 63.0))

  return pattern


shades = " ▒▓█"

if __name__ == "__main__":

  patterns = {
    "linear":        generate_pattern(linear,       linear,       256),
    "sine":          generate_pattern(sine,         sine,         256),
    "twinkle":       generate_pattern(twinkle,      twinkle,      256),
    "random":        generate_pattern(random,       random,       256),
    "sparkle":       generate_pattern(sparkle,      sparkle,      256),
    "disco":         generate_pattern(disco,        disco,        256),
    "square":        generate_pattern(square,       square,       256),
    "disco_square":  generate_pattern(disco,        square,       256),
    "lighthouse":    generate_pattern(lighthouse1,  lighthouse2,  256),
  }
  
  colorful.use_true_colors()

  scale = 64 / 4

  for name in patterns:
    print("")
    pattern = patterns[name]
    print(name)
    print("- ", end="")
    for v in pattern[0]:      
      print(shades[int(v / scale)], end="")
    print("")
    print("- ", end="")
    for v in pattern[1]:      
      print(shades[int(v / scale)], end="")
    print("")
    
  save_patterns()

